// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethermint/evm/v1/evm.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the EVM module parameters
struct Ethermint_Evm_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// evm denom represents the token denomination used to run the EVM state
  /// transitions.
  var evmDenom: String {
    get {return _storage._evmDenom}
    set {_uniqueStorage()._evmDenom = newValue}
  }

  /// enable create toggles state transitions that use the vm.Create function
  var enableCreate: Bool {
    get {return _storage._enableCreate}
    set {_uniqueStorage()._enableCreate = newValue}
  }

  /// enable call toggles state transitions that use the vm.Call function
  var enableCall: Bool {
    get {return _storage._enableCall}
    set {_uniqueStorage()._enableCall = newValue}
  }

  /// extra eips defines the additional EIPs for the vm.Config
  var extraEips: [Int64] {
    get {return _storage._extraEips}
    set {_uniqueStorage()._extraEips = newValue}
  }

  /// chain config defines the EVM chain configuration parameters
  var chainConfig: Ethermint_Evm_V1_ChainConfig {
    get {return _storage._chainConfig ?? Ethermint_Evm_V1_ChainConfig()}
    set {_uniqueStorage()._chainConfig = newValue}
  }
  /// Returns true if `chainConfig` has been explicitly set.
  var hasChainConfig: Bool {return _storage._chainConfig != nil}
  /// Clears the value of `chainConfig`. Subsequent reads from it will return its default value.
  mutating func clearChainConfig() {_uniqueStorage()._chainConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ChainConfig defines the Ethereum ChainConfig parameters using *sdk.Int values
/// instead of *big.Int.
struct Ethermint_Evm_V1_ChainConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Homestead switch block (nil no fork, 0 = already homestead)
  var homesteadBlock: String = String()

  /// TheDAO hard-fork switch block (nil no fork)
  var daoForkBlock: String = String()

  /// Whether the nodes supports or opposes the DAO hard-fork
  var daoForkSupport: Bool = false

  /// EIP150 implements the Gas price changes
  /// (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil no fork)
  var eip150Block: String = String()

  /// EIP150 HF hash (needed for header only clients as only gas pricing changed)
  var eip150Hash: String = String()

  /// EIP155Block HF block
  var eip155Block: String = String()

  /// EIP158 HF block
  var eip158Block: String = String()

  /// Byzantium switch block (nil no fork, 0 = already on byzantium)
  var byzantiumBlock: String = String()

  /// Constantinople switch block (nil no fork, 0 = already activated)
  var constantinopleBlock: String = String()

  /// Petersburg switch block (nil same as Constantinople)
  var petersburgBlock: String = String()

  /// Istanbul switch block (nil no fork, 0 = already on istanbul)
  var istanbulBlock: String = String()

  /// Eip-2384 (bomb delay) switch block (nil no fork, 0 = already activated)
  var muirGlacierBlock: String = String()

  /// Berlin switch block (nil = no fork, 0 = already on berlin)
  var berlinBlock: String = String()

  /// London switch block (nil = no fork, 0 = already on london)
  var londonBlock: String = String()

  /// Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already activated)
  var arrowGlacierBlock: String = String()

  /// EIP-3675 (TheMerge) switch block (nil = no fork, 0 = already in merge proceedings)
  var mergeForkBlock: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// State represents a single Storage key value pair item.
struct Ethermint_Evm_V1_State {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TransactionLogs define the logs generated from a transaction execution
/// with a given hash. It it used for import/export data as transactions are not
/// persisted on blockchain state after an upgrade.
struct Ethermint_Evm_V1_TransactionLogs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: String = String()

  var logs: [Ethermint_Evm_V1_Log] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Log represents an protobuf compatible Ethereum Log that defines a contract
/// log event. These events are generated by the LOG opcode and stored/indexed by
/// the node.
struct Ethermint_Evm_V1_Log {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address of the contract that generated the event
  var address: String = String()

  /// list of topics provided by the contract.
  var topics: [String] = []

  /// supplied by the contract, usually ABI-encoded
  var data: Data = Data()

  /// block in which the transaction was included
  var blockNumber: UInt64 = 0

  /// hash of the transaction
  var txHash: String = String()

  /// index of the transaction in the block
  var txIndex: UInt64 = 0

  /// hash of the block in which the transaction was included
  var blockHash: String = String()

  /// index of the log in the block
  var index: UInt64 = 0

  /// The Removed field is true if this log was reverted due to a chain
  /// reorganisation. You must pay attention to this field if you receive logs
  /// through a filter query.
  var removed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TxResult stores results of Tx execution.
struct Ethermint_Evm_V1_TxResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// contract_address contains the ethereum address of the created contract (if
  /// any). If the state transition is an evm.Call, the contract address will be
  /// empty.
  var contractAddress: String = String()

  /// bloom represents the bloom filter bytes
  var bloom: Data = Data()

  /// tx_logs contains the transaction hash and the proto-compatible ethereum
  /// logs.
  var txLogs: Ethermint_Evm_V1_TransactionLogs {
    get {return _txLogs ?? Ethermint_Evm_V1_TransactionLogs()}
    set {_txLogs = newValue}
  }
  /// Returns true if `txLogs` has been explicitly set.
  var hasTxLogs: Bool {return self._txLogs != nil}
  /// Clears the value of `txLogs`. Subsequent reads from it will return its default value.
  mutating func clearTxLogs() {self._txLogs = nil}

  /// ret defines the bytes from the execution.
  var ret: Data = Data()

  /// reverted flag is set to true when the call has been reverted
  var reverted: Bool = false

  /// gas_used notes the amount of gas consumed while execution
  var gasUsed: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _txLogs: Ethermint_Evm_V1_TransactionLogs? = nil
}

/// AccessTuple is the element type of an access list.
struct Ethermint_Evm_V1_AccessTuple {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// hex formatted ethereum address
  var address: String = String()

  /// hex formatted hashes of the storage keys
  var storageKeys: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TraceConfig holds extra parameters to trace functions.
struct Ethermint_Evm_V1_TraceConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// custom javascript tracer
  var tracer: String {
    get {return _storage._tracer}
    set {_uniqueStorage()._tracer = newValue}
  }

  /// overrides the default timeout of 5 seconds for JavaScript-based tracing
  /// calls
  var timeout: String {
    get {return _storage._timeout}
    set {_uniqueStorage()._timeout = newValue}
  }

  /// number of blocks the tracer is willing to go back
  var reexec: UInt64 {
    get {return _storage._reexec}
    set {_uniqueStorage()._reexec = newValue}
  }

  /// disable stack capture
  var disableStack: Bool {
    get {return _storage._disableStack}
    set {_uniqueStorage()._disableStack = newValue}
  }

  /// disable storage capture
  var disableStorage: Bool {
    get {return _storage._disableStorage}
    set {_uniqueStorage()._disableStorage = newValue}
  }

  /// print output during capture end
  var debug: Bool {
    get {return _storage._debug}
    set {_uniqueStorage()._debug = newValue}
  }

  /// maximum length of output, but zero means unlimited
  var limit: Int32 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  /// Chain overrides, can be used to execute a trace using future fork rules
  var overrides: Ethermint_Evm_V1_ChainConfig {
    get {return _storage._overrides ?? Ethermint_Evm_V1_ChainConfig()}
    set {_uniqueStorage()._overrides = newValue}
  }
  /// Returns true if `overrides` has been explicitly set.
  var hasOverrides: Bool {return _storage._overrides != nil}
  /// Clears the value of `overrides`. Subsequent reads from it will return its default value.
  mutating func clearOverrides() {_uniqueStorage()._overrides = nil}

  /// enable memory capture
  var enableMemory: Bool {
    get {return _storage._enableMemory}
    set {_uniqueStorage()._enableMemory = newValue}
  }

  /// enable return data capture
  var enableReturnData: Bool {
    get {return _storage._enableReturnData}
    set {_uniqueStorage()._enableReturnData = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Ethermint_Evm_V1_Params: @unchecked Sendable {}
extension Ethermint_Evm_V1_ChainConfig: @unchecked Sendable {}
extension Ethermint_Evm_V1_State: @unchecked Sendable {}
extension Ethermint_Evm_V1_TransactionLogs: @unchecked Sendable {}
extension Ethermint_Evm_V1_Log: @unchecked Sendable {}
extension Ethermint_Evm_V1_TxResult: @unchecked Sendable {}
extension Ethermint_Evm_V1_AccessTuple: @unchecked Sendable {}
extension Ethermint_Evm_V1_TraceConfig: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ethermint.evm.v1"

extension Ethermint_Evm_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "evm_denom"),
    2: .standard(proto: "enable_create"),
    3: .standard(proto: "enable_call"),
    4: .standard(proto: "extra_eips"),
    5: .standard(proto: "chain_config"),
  ]

  fileprivate class _StorageClass {
    var _evmDenom: String = String()
    var _enableCreate: Bool = false
    var _enableCall: Bool = false
    var _extraEips: [Int64] = []
    var _chainConfig: Ethermint_Evm_V1_ChainConfig? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _evmDenom = source._evmDenom
      _enableCreate = source._enableCreate
      _enableCall = source._enableCall
      _extraEips = source._extraEips
      _chainConfig = source._chainConfig
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._evmDenom) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._enableCreate) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._enableCall) }()
        case 4: try { try decoder.decodeRepeatedInt64Field(value: &_storage._extraEips) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._chainConfig) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._evmDenom.isEmpty {
        try visitor.visitSingularStringField(value: _storage._evmDenom, fieldNumber: 1)
      }
      if _storage._enableCreate != false {
        try visitor.visitSingularBoolField(value: _storage._enableCreate, fieldNumber: 2)
      }
      if _storage._enableCall != false {
        try visitor.visitSingularBoolField(value: _storage._enableCall, fieldNumber: 3)
      }
      if !_storage._extraEips.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._extraEips, fieldNumber: 4)
      }
      try { if let v = _storage._chainConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_Params, rhs: Ethermint_Evm_V1_Params) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._evmDenom != rhs_storage._evmDenom {return false}
        if _storage._enableCreate != rhs_storage._enableCreate {return false}
        if _storage._enableCall != rhs_storage._enableCall {return false}
        if _storage._extraEips != rhs_storage._extraEips {return false}
        if _storage._chainConfig != rhs_storage._chainConfig {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_ChainConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChainConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "homestead_block"),
    2: .standard(proto: "dao_fork_block"),
    3: .standard(proto: "dao_fork_support"),
    4: .standard(proto: "eip150_block"),
    5: .standard(proto: "eip150_hash"),
    6: .standard(proto: "eip155_block"),
    7: .standard(proto: "eip158_block"),
    8: .standard(proto: "byzantium_block"),
    9: .standard(proto: "constantinople_block"),
    10: .standard(proto: "petersburg_block"),
    11: .standard(proto: "istanbul_block"),
    12: .standard(proto: "muir_glacier_block"),
    13: .standard(proto: "berlin_block"),
    17: .standard(proto: "london_block"),
    18: .standard(proto: "arrow_glacier_block"),
    19: .standard(proto: "merge_fork_block"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.homesteadBlock) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.daoForkBlock) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.daoForkSupport) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.eip150Block) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.eip150Hash) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.eip155Block) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.eip158Block) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.byzantiumBlock) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.constantinopleBlock) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.petersburgBlock) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.istanbulBlock) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.muirGlacierBlock) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.berlinBlock) }()
      case 17: try { try decoder.decodeSingularStringField(value: &self.londonBlock) }()
      case 18: try { try decoder.decodeSingularStringField(value: &self.arrowGlacierBlock) }()
      case 19: try { try decoder.decodeSingularStringField(value: &self.mergeForkBlock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.homesteadBlock.isEmpty {
      try visitor.visitSingularStringField(value: self.homesteadBlock, fieldNumber: 1)
    }
    if !self.daoForkBlock.isEmpty {
      try visitor.visitSingularStringField(value: self.daoForkBlock, fieldNumber: 2)
    }
    if self.daoForkSupport != false {
      try visitor.visitSingularBoolField(value: self.daoForkSupport, fieldNumber: 3)
    }
    if !self.eip150Block.isEmpty {
      try visitor.visitSingularStringField(value: self.eip150Block, fieldNumber: 4)
    }
    if !self.eip150Hash.isEmpty {
      try visitor.visitSingularStringField(value: self.eip150Hash, fieldNumber: 5)
    }
    if !self.eip155Block.isEmpty {
      try visitor.visitSingularStringField(value: self.eip155Block, fieldNumber: 6)
    }
    if !self.eip158Block.isEmpty {
      try visitor.visitSingularStringField(value: self.eip158Block, fieldNumber: 7)
    }
    if !self.byzantiumBlock.isEmpty {
      try visitor.visitSingularStringField(value: self.byzantiumBlock, fieldNumber: 8)
    }
    if !self.constantinopleBlock.isEmpty {
      try visitor.visitSingularStringField(value: self.constantinopleBlock, fieldNumber: 9)
    }
    if !self.petersburgBlock.isEmpty {
      try visitor.visitSingularStringField(value: self.petersburgBlock, fieldNumber: 10)
    }
    if !self.istanbulBlock.isEmpty {
      try visitor.visitSingularStringField(value: self.istanbulBlock, fieldNumber: 11)
    }
    if !self.muirGlacierBlock.isEmpty {
      try visitor.visitSingularStringField(value: self.muirGlacierBlock, fieldNumber: 12)
    }
    if !self.berlinBlock.isEmpty {
      try visitor.visitSingularStringField(value: self.berlinBlock, fieldNumber: 13)
    }
    if !self.londonBlock.isEmpty {
      try visitor.visitSingularStringField(value: self.londonBlock, fieldNumber: 17)
    }
    if !self.arrowGlacierBlock.isEmpty {
      try visitor.visitSingularStringField(value: self.arrowGlacierBlock, fieldNumber: 18)
    }
    if !self.mergeForkBlock.isEmpty {
      try visitor.visitSingularStringField(value: self.mergeForkBlock, fieldNumber: 19)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_ChainConfig, rhs: Ethermint_Evm_V1_ChainConfig) -> Bool {
    if lhs.homesteadBlock != rhs.homesteadBlock {return false}
    if lhs.daoForkBlock != rhs.daoForkBlock {return false}
    if lhs.daoForkSupport != rhs.daoForkSupport {return false}
    if lhs.eip150Block != rhs.eip150Block {return false}
    if lhs.eip150Hash != rhs.eip150Hash {return false}
    if lhs.eip155Block != rhs.eip155Block {return false}
    if lhs.eip158Block != rhs.eip158Block {return false}
    if lhs.byzantiumBlock != rhs.byzantiumBlock {return false}
    if lhs.constantinopleBlock != rhs.constantinopleBlock {return false}
    if lhs.petersburgBlock != rhs.petersburgBlock {return false}
    if lhs.istanbulBlock != rhs.istanbulBlock {return false}
    if lhs.muirGlacierBlock != rhs.muirGlacierBlock {return false}
    if lhs.berlinBlock != rhs.berlinBlock {return false}
    if lhs.londonBlock != rhs.londonBlock {return false}
    if lhs.arrowGlacierBlock != rhs.arrowGlacierBlock {return false}
    if lhs.mergeForkBlock != rhs.mergeForkBlock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".State"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_State, rhs: Ethermint_Evm_V1_State) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_TransactionLogs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransactionLogs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "logs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.logs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if !self.logs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.logs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_TransactionLogs, rhs: Ethermint_Evm_V1_TransactionLogs) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.logs != rhs.logs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_Log: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Log"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "topics"),
    3: .same(proto: "data"),
    4: .standard(proto: "block_number"),
    5: .standard(proto: "tx_hash"),
    6: .standard(proto: "tx_index"),
    7: .standard(proto: "block_hash"),
    8: .same(proto: "index"),
    9: .same(proto: "removed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.topics) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.blockNumber) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.txHash) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.txIndex) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.blockHash) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.index) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.removed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.topics.isEmpty {
      try visitor.visitRepeatedStringField(value: self.topics, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    if self.blockNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockNumber, fieldNumber: 4)
    }
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 5)
    }
    if self.txIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.txIndex, fieldNumber: 6)
    }
    if !self.blockHash.isEmpty {
      try visitor.visitSingularStringField(value: self.blockHash, fieldNumber: 7)
    }
    if self.index != 0 {
      try visitor.visitSingularUInt64Field(value: self.index, fieldNumber: 8)
    }
    if self.removed != false {
      try visitor.visitSingularBoolField(value: self.removed, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_Log, rhs: Ethermint_Evm_V1_Log) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.topics != rhs.topics {return false}
    if lhs.data != rhs.data {return false}
    if lhs.blockNumber != rhs.blockNumber {return false}
    if lhs.txHash != rhs.txHash {return false}
    if lhs.txIndex != rhs.txIndex {return false}
    if lhs.blockHash != rhs.blockHash {return false}
    if lhs.index != rhs.index {return false}
    if lhs.removed != rhs.removed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_TxResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TxResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_address"),
    2: .same(proto: "bloom"),
    3: .standard(proto: "tx_logs"),
    4: .same(proto: "ret"),
    5: .same(proto: "reverted"),
    6: .standard(proto: "gas_used"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.bloom) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._txLogs) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.ret) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.reverted) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.gasUsed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 1)
    }
    if !self.bloom.isEmpty {
      try visitor.visitSingularBytesField(value: self.bloom, fieldNumber: 2)
    }
    try { if let v = self._txLogs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.ret.isEmpty {
      try visitor.visitSingularBytesField(value: self.ret, fieldNumber: 4)
    }
    if self.reverted != false {
      try visitor.visitSingularBoolField(value: self.reverted, fieldNumber: 5)
    }
    if self.gasUsed != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasUsed, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_TxResult, rhs: Ethermint_Evm_V1_TxResult) -> Bool {
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.bloom != rhs.bloom {return false}
    if lhs._txLogs != rhs._txLogs {return false}
    if lhs.ret != rhs.ret {return false}
    if lhs.reverted != rhs.reverted {return false}
    if lhs.gasUsed != rhs.gasUsed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_AccessTuple: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccessTuple"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "storage_keys"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.storageKeys) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.storageKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.storageKeys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_AccessTuple, rhs: Ethermint_Evm_V1_AccessTuple) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.storageKeys != rhs.storageKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_TraceConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TraceConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tracer"),
    2: .same(proto: "timeout"),
    3: .same(proto: "reexec"),
    5: .standard(proto: "disable_stack"),
    6: .standard(proto: "disable_storage"),
    8: .same(proto: "debug"),
    9: .same(proto: "limit"),
    10: .same(proto: "overrides"),
    11: .standard(proto: "enable_memory"),
    12: .standard(proto: "enable_return_data"),
  ]

  fileprivate class _StorageClass {
    var _tracer: String = String()
    var _timeout: String = String()
    var _reexec: UInt64 = 0
    var _disableStack: Bool = false
    var _disableStorage: Bool = false
    var _debug: Bool = false
    var _limit: Int32 = 0
    var _overrides: Ethermint_Evm_V1_ChainConfig? = nil
    var _enableMemory: Bool = false
    var _enableReturnData: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _tracer = source._tracer
      _timeout = source._timeout
      _reexec = source._reexec
      _disableStack = source._disableStack
      _disableStorage = source._disableStorage
      _debug = source._debug
      _limit = source._limit
      _overrides = source._overrides
      _enableMemory = source._enableMemory
      _enableReturnData = source._enableReturnData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._tracer) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._timeout) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._reexec) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._disableStack) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._disableStorage) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._debug) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._limit) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._overrides) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._enableMemory) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._enableReturnData) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._tracer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tracer, fieldNumber: 1)
      }
      if !_storage._timeout.isEmpty {
        try visitor.visitSingularStringField(value: _storage._timeout, fieldNumber: 2)
      }
      if _storage._reexec != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._reexec, fieldNumber: 3)
      }
      if _storage._disableStack != false {
        try visitor.visitSingularBoolField(value: _storage._disableStack, fieldNumber: 5)
      }
      if _storage._disableStorage != false {
        try visitor.visitSingularBoolField(value: _storage._disableStorage, fieldNumber: 6)
      }
      if _storage._debug != false {
        try visitor.visitSingularBoolField(value: _storage._debug, fieldNumber: 8)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularInt32Field(value: _storage._limit, fieldNumber: 9)
      }
      try { if let v = _storage._overrides {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if _storage._enableMemory != false {
        try visitor.visitSingularBoolField(value: _storage._enableMemory, fieldNumber: 11)
      }
      if _storage._enableReturnData != false {
        try visitor.visitSingularBoolField(value: _storage._enableReturnData, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_TraceConfig, rhs: Ethermint_Evm_V1_TraceConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._tracer != rhs_storage._tracer {return false}
        if _storage._timeout != rhs_storage._timeout {return false}
        if _storage._reexec != rhs_storage._reexec {return false}
        if _storage._disableStack != rhs_storage._disableStack {return false}
        if _storage._disableStorage != rhs_storage._disableStorage {return false}
        if _storage._debug != rhs_storage._debug {return false}
        if _storage._limit != rhs_storage._limit {return false}
        if _storage._overrides != rhs_storage._overrides {return false}
        if _storage._enableMemory != rhs_storage._enableMemory {return false}
        if _storage._enableReturnData != rhs_storage._enableReturnData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
